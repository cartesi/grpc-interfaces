// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `manager-high.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct NewSessionRequest {
    // message fields
    pub machine: ::protobuf::SingularPtrField<super::cartesi_base::MachineRequest>,
    pub session_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NewSessionRequest {
    fn default() -> &'a NewSessionRequest {
        <NewSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl NewSessionRequest {
    pub fn new() -> NewSessionRequest {
        ::std::default::Default::default()
    }

    // .CartesiCore.MachineRequest machine = 1;


    pub fn get_machine(&self) -> &super::cartesi_base::MachineRequest {
        self.machine.as_ref().unwrap_or_else(|| super::cartesi_base::MachineRequest::default_instance())
    }
    pub fn clear_machine(&mut self) {
        self.machine.clear();
    }

    pub fn has_machine(&self) -> bool {
        self.machine.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine(&mut self, v: super::cartesi_base::MachineRequest) {
        self.machine = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine(&mut self) -> &mut super::cartesi_base::MachineRequest {
        if self.machine.is_none() {
            self.machine.set_default();
        }
        self.machine.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine(&mut self) -> super::cartesi_base::MachineRequest {
        self.machine.take().unwrap_or_else(|| super::cartesi_base::MachineRequest::new())
    }

    // string session_id = 2;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NewSessionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.machine {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.machine)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.machine.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.session_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.machine.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.session_id.is_empty() {
            os.write_string(2, &self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NewSessionRequest {
        NewSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cartesi_base::MachineRequest>>(
                    "machine",
                    |m: &NewSessionRequest| { &m.machine },
                    |m: &mut NewSessionRequest| { &mut m.machine },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session_id",
                    |m: &NewSessionRequest| { &m.session_id },
                    |m: &mut NewSessionRequest| { &mut m.session_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NewSessionRequest>(
                    "NewSessionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NewSessionRequest {
        static mut instance: ::protobuf::lazy::Lazy<NewSessionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NewSessionRequest,
        };
        unsafe {
            instance.get(NewSessionRequest::new)
        }
    }
}

impl ::protobuf::Clear for NewSessionRequest {
    fn clear(&mut self) {
        self.machine.clear();
        self.session_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NewSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionRunRequest {
    // message fields
    pub session_id: ::std::string::String,
    pub final_cycles: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionRunRequest {
    fn default() -> &'a SessionRunRequest {
        <SessionRunRequest as ::protobuf::Message>::default_instance()
    }
}

impl SessionRunRequest {
    pub fn new() -> SessionRunRequest {
        ::std::default::Default::default()
    }

    // string session_id = 1;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }

    // repeated uint64 final_cycles = 2;


    pub fn get_final_cycles(&self) -> &[u64] {
        &self.final_cycles
    }
    pub fn clear_final_cycles(&mut self) {
        self.final_cycles.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_cycles(&mut self, v: ::std::vec::Vec<u64>) {
        self.final_cycles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_final_cycles(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.final_cycles
    }

    // Take field
    pub fn take_final_cycles(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.final_cycles, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionRunRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.final_cycles)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_id);
        }
        for value in &self.final_cycles {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.session_id.is_empty() {
            os.write_string(1, &self.session_id)?;
        }
        for v in &self.final_cycles {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionRunRequest {
        SessionRunRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session_id",
                    |m: &SessionRunRequest| { &m.session_id },
                    |m: &mut SessionRunRequest| { &mut m.session_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "final_cycles",
                    |m: &SessionRunRequest| { &m.final_cycles },
                    |m: &mut SessionRunRequest| { &mut m.final_cycles },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SessionRunRequest>(
                    "SessionRunRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SessionRunRequest {
        static mut instance: ::protobuf::lazy::Lazy<SessionRunRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SessionRunRequest,
        };
        unsafe {
            instance.get(SessionRunRequest::new)
        }
    }
}

impl ::protobuf::Clear for SessionRunRequest {
    fn clear(&mut self) {
        self.session_id.clear();
        self.final_cycles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionRunRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionRunRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionRunResult {
    // message fields
    pub summaries: ::protobuf::RepeatedField<super::cartesi_base::RunResponse>,
    pub hashes: ::protobuf::RepeatedField<super::cartesi_base::Hash>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionRunResult {
    fn default() -> &'a SessionRunResult {
        <SessionRunResult as ::protobuf::Message>::default_instance()
    }
}

impl SessionRunResult {
    pub fn new() -> SessionRunResult {
        ::std::default::Default::default()
    }

    // repeated .CartesiCore.RunResponse summaries = 1;


    pub fn get_summaries(&self) -> &[super::cartesi_base::RunResponse] {
        &self.summaries
    }
    pub fn clear_summaries(&mut self) {
        self.summaries.clear();
    }

    // Param is passed by value, moved
    pub fn set_summaries(&mut self, v: ::protobuf::RepeatedField<super::cartesi_base::RunResponse>) {
        self.summaries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_summaries(&mut self) -> &mut ::protobuf::RepeatedField<super::cartesi_base::RunResponse> {
        &mut self.summaries
    }

    // Take field
    pub fn take_summaries(&mut self) -> ::protobuf::RepeatedField<super::cartesi_base::RunResponse> {
        ::std::mem::replace(&mut self.summaries, ::protobuf::RepeatedField::new())
    }

    // repeated .CartesiCore.Hash hashes = 2;


    pub fn get_hashes(&self) -> &[super::cartesi_base::Hash] {
        &self.hashes
    }
    pub fn clear_hashes(&mut self) {
        self.hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hashes(&mut self, v: ::protobuf::RepeatedField<super::cartesi_base::Hash>) {
        self.hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hashes(&mut self) -> &mut ::protobuf::RepeatedField<super::cartesi_base::Hash> {
        &mut self.hashes
    }

    // Take field
    pub fn take_hashes(&mut self) -> ::protobuf::RepeatedField<super::cartesi_base::Hash> {
        ::std::mem::replace(&mut self.hashes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SessionRunResult {
    fn is_initialized(&self) -> bool {
        for v in &self.summaries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hashes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.summaries)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.hashes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.summaries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.hashes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.summaries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.hashes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionRunResult {
        SessionRunResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cartesi_base::RunResponse>>(
                    "summaries",
                    |m: &SessionRunResult| { &m.summaries },
                    |m: &mut SessionRunResult| { &mut m.summaries },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cartesi_base::Hash>>(
                    "hashes",
                    |m: &SessionRunResult| { &m.hashes },
                    |m: &mut SessionRunResult| { &mut m.hashes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SessionRunResult>(
                    "SessionRunResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SessionRunResult {
        static mut instance: ::protobuf::lazy::Lazy<SessionRunResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SessionRunResult,
        };
        unsafe {
            instance.get(SessionRunResult::new)
        }
    }
}

impl ::protobuf::Clear for SessionRunResult {
    fn clear(&mut self) {
        self.summaries.clear();
        self.hashes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionRunResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionRunResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionStepRequest {
    // message fields
    pub session_id: ::std::string::String,
    pub initial_cycle: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStepRequest {
    fn default() -> &'a SessionStepRequest {
        <SessionStepRequest as ::protobuf::Message>::default_instance()
    }
}

impl SessionStepRequest {
    pub fn new() -> SessionStepRequest {
        ::std::default::Default::default()
    }

    // string session_id = 1;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }

    // uint64 initial_cycle = 2;


    pub fn get_initial_cycle(&self) -> u64 {
        self.initial_cycle
    }
    pub fn clear_initial_cycle(&mut self) {
        self.initial_cycle = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_cycle(&mut self, v: u64) {
        self.initial_cycle = v;
    }
}

impl ::protobuf::Message for SessionStepRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.initial_cycle = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_id);
        }
        if self.initial_cycle != 0 {
            my_size += ::protobuf::rt::value_size(2, self.initial_cycle, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.session_id.is_empty() {
            os.write_string(1, &self.session_id)?;
        }
        if self.initial_cycle != 0 {
            os.write_uint64(2, self.initial_cycle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStepRequest {
        SessionStepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session_id",
                    |m: &SessionStepRequest| { &m.session_id },
                    |m: &mut SessionStepRequest| { &mut m.session_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "initial_cycle",
                    |m: &SessionStepRequest| { &m.initial_cycle },
                    |m: &mut SessionStepRequest| { &mut m.initial_cycle },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SessionStepRequest>(
                    "SessionStepRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SessionStepRequest {
        static mut instance: ::protobuf::lazy::Lazy<SessionStepRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SessionStepRequest,
        };
        unsafe {
            instance.get(SessionStepRequest::new)
        }
    }
}

impl ::protobuf::Clear for SessionStepRequest {
    fn clear(&mut self) {
        self.session_id.clear();
        self.initial_cycle = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionStepResult {
    // message fields
    pub log: ::protobuf::SingularPtrField<super::cartesi_base::AccessLog>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStepResult {
    fn default() -> &'a SessionStepResult {
        <SessionStepResult as ::protobuf::Message>::default_instance()
    }
}

impl SessionStepResult {
    pub fn new() -> SessionStepResult {
        ::std::default::Default::default()
    }

    // .CartesiCore.AccessLog log = 1;


    pub fn get_log(&self) -> &super::cartesi_base::AccessLog {
        self.log.as_ref().unwrap_or_else(|| super::cartesi_base::AccessLog::default_instance())
    }
    pub fn clear_log(&mut self) {
        self.log.clear();
    }

    pub fn has_log(&self) -> bool {
        self.log.is_some()
    }

    // Param is passed by value, moved
    pub fn set_log(&mut self, v: super::cartesi_base::AccessLog) {
        self.log = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log(&mut self) -> &mut super::cartesi_base::AccessLog {
        if self.log.is_none() {
            self.log.set_default();
        }
        self.log.as_mut().unwrap()
    }

    // Take field
    pub fn take_log(&mut self) -> super::cartesi_base::AccessLog {
        self.log.take().unwrap_or_else(|| super::cartesi_base::AccessLog::new())
    }
}

impl ::protobuf::Message for SessionStepResult {
    fn is_initialized(&self) -> bool {
        for v in &self.log {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.log)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.log.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.log.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStepResult {
        SessionStepResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cartesi_base::AccessLog>>(
                    "log",
                    |m: &SessionStepResult| { &m.log },
                    |m: &mut SessionStepResult| { &mut m.log },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SessionStepResult>(
                    "SessionStepResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SessionStepResult {
        static mut instance: ::protobuf::lazy::Lazy<SessionStepResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SessionStepResult,
        };
        unsafe {
            instance.get(SessionStepResult::new)
        }
    }
}

impl ::protobuf::Clear for SessionStepResult {
    fn clear(&mut self) {
        self.log.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStepResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStepResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12manager-high.proto\x12\x12CartesiManagerHigh\x1a\x12cartesi-base.p\
    roto\"i\n\x11NewSessionRequest\x125\n\x07machine\x18\x01\x20\x01(\x0b2\
    \x1b.CartesiCore.MachineRequestR\x07machine\x12\x1d\n\nsession_id\x18\
    \x02\x20\x01(\tR\tsessionId\"U\n\x11SessionRunRequest\x12\x1d\n\nsession\
    _id\x18\x01\x20\x01(\tR\tsessionId\x12!\n\x0cfinal_cycles\x18\x02\x20\
    \x03(\x04R\x0bfinalCycles\"u\n\x10SessionRunResult\x126\n\tsummaries\x18\
    \x01\x20\x03(\x0b2\x18.CartesiCore.RunResponseR\tsummaries\x12)\n\x06has\
    hes\x18\x02\x20\x03(\x0b2\x11.CartesiCore.HashR\x06hashes\"X\n\x12Sessio\
    nStepRequest\x12\x1d\n\nsession_id\x18\x01\x20\x01(\tR\tsessionId\x12#\n\
    \rinitial_cycle\x18\x02\x20\x01(\x04R\x0cinitialCycle\"=\n\x11SessionSte\
    pResult\x12(\n\x03log\x18\x01\x20\x01(\x0b2\x16.CartesiCore.AccessLogR\
    \x03log2\x9b\x02\n\x12MachineManagerHigh\x12H\n\nNewSession\x12%.Cartesi\
    ManagerHigh.NewSessionRequest\x1a\x11.CartesiCore.Hash\"\0\x12[\n\nSessi\
    onRun\x12%.CartesiManagerHigh.SessionRunRequest\x1a$.CartesiManagerHigh.\
    SessionRunResult\"\0\x12^\n\x0bSessionStep\x12&.CartesiManagerHigh.Sessi\
    onStepRequest\x1a%.CartesiManagerHigh.SessionStepResult\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
